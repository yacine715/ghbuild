# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j6nrQViKHZmCoxbwG6_JUrsg5_h-5wkV
"""

!pip install PyGithub

from datetime import datetime, timedelta
from github import Github
import yaml
import csv
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import requests
from github import Auth
import time

#Initialisation d'une liste pour ajouter les répoqitories qui contient le dossier .github/workflows
repositories = []

# Token d'authentification pour l'API GitHub
token = "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"
from github import Auth

# using an access token
auth = Auth.Token(token)


g = Github(auth=auth)

# Dates de début et de fin de la recherche
start_date = datetime(2019, 1, 1)
end_date = datetime(2024, 6, 12)


while start_date <= end_date:
    # Crée la requête de recherche pour la plage de dates actuelle
    query = f"created:{start_date.strftime('%Y-%m-%d')}..{start_date.strftime('%Y-%m-%d')}"

    # Exécute la recherche de dépôts avec la requête actuelle
    results = g.search_repositories(query=query)

    # Boucle sur les résultats pour vérifier si le répertoire .github/workflows existe dans le dépôt
    for repo in results:
        try:
            workflows = repo.get_contents(".github/workflows")
            #print(repo.html_url)
            repositories.append(repo.html_url)
        except Exception as e:
            continue

    # Incrémente la date de début pour passer à la prochaine journée dans la plage de dates
    start_date += timedelta(days=1)



# Créer un dictionnaire pur stocker tous les actions utilisées pour chaque repo
repo_actions = {}

# Set up the headers for the API requests
headers = {
    'Accept': 'application/vnd.github+json',
    'User-Agent': 'request',
    'Authorization': 'token ' + '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'
}

# Set up the base URL for the Github API REST
base_url = "https://api.github.com"

# Loop over each repository URL in the list
for repository_url in repositories:
    if repository_url not in repo_actions:
        # Extract the owner and repository name from the URL
        owner, repo_name = repository_url.split("/")[-2:]

        # Set up the URL for the API request to get the contents of the .github/workflows directory
        workflows_url = f"{base_url}/repos/{owner}/{repo_name}/contents/.github/workflows"

        # Make the API request to get the contents of the .github/workflows directory
        response = requests.get(workflows_url, headers=headers)

        # Check if the directory exists and contains the main.yml file
        if response.status_code == 200:
            # Create a list to store the actions used in this repository
            actions_list = []

            # Get the response as JSON
            response_data = response.json()

            # Loop over each file in the .github/workflows directory
            for item in response_data:
                # Check if the file is a YAML file
                if isinstance(item, dict) and item["name"] == "build.yml":
                    # Make an API request to get the contents of the file
                    yml_response = requests.get(item["download_url"], headers=headers)

                    # Parse the response as YAML
                    try:
                        yml_data = yaml.load(yml_response.text, Loader=yaml.FullLoader)
                        # Extract the project name and filename here
                        # For example:
                        project_name = yml_data.get("name", "Unknown Project")
                        filename = item["name"]
                        print(f"Project: {project_name}, Filename: {filename}")
                    except yaml.YAMLError:
                     continue

#Triez les actions par ordre alphabétique
actions = sorted(set(action for actions in repo_actions.values() for action in actions))

# Créez un DataFrame avec des zéros pour toutes les entrées
df = pd.DataFrame(0, index=repo_actions.keys(), columns=actions)

# Remplacez les zéros par des uns pour les actions utilisées dans chaque projet
for project_url, used_actions in repo_actions.items():
    df.loc[project_url, used_actions] = 1
# Écrivez le DataFrame dans un fichier CSV
df.to_csv(r"C:\Users\yacin\OneDrive\Bureau\My project\output.csv")

df = pd.DataFrame(repositories, columns=['Project_URL'])

df.shape

df